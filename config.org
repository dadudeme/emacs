#+Title: Gnu emacs config
#+Author: user
startup: showeverything

* Improtrant variables
#+begin_src emacs-lisp
  (setq package-user-dir "~/.config/emacs/packages")
  (defun update-envvars ()
    (setq inferior-lisp-program (executable-find sbcl)))
#+end_src



* use-package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))

#+end_src
* All the Icons
Installs Icons for commands and dired
#+begin_src emacs-lisp
    (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  :font "Monospace"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Sans"
  :height 110
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Monospace"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "Monospace"))
#+end_src

* Gui Modifications
** Removing UI Elements
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Adding UI elements
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (setq tab-always-indent 'complete)

#+end_src
** Cool  text features
#+begin_src emacs-lisp
  (setq-default show-trailing-whitespace t)
  (setq scroll-step 1
        scroll-conservatively 5)
  (electric-pair-mode t)
#+end_src
** which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-allow-imprecise-window-fit nil
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " â†’ " ))
#+end_src
** IVY
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config
    (counsel-mode)
  					;(setq ivy-initial-inputs-alist nil) ;; removes starting ^ regex in M-x
    )
  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
  			  ivy-rich-switch-buffer-align-virtual-buffer t
  			  ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
  			       'ivy-rich-switch-buffer-transformer))
  (use-package nixos-options
    :custom
    (setq ivy-nixos-options-default 2))
  (global-set-key (kbd "C-c C-s-n") 'ivy-nixos-options)
#+end_src


** Theme
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :ensure t
    :config
    (load-theme 'gruvbox-light-soft))
#+end_src


* Org mode
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Enabling Org Bulltes
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


* Packages
** Magit
#+begin_src emacs-lisp
  (use-package magit :demand t)
#+end_src
** direnv
#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
  (add-hook 'direnv-after-load-hook 'update-envvars)
#+end_src
** ivy-nixos-options
#+begin_src emacs-lisp

#+end_src


* Language support
** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src
** Common lisp
#+begin_src emacs-lisp
  (use-package sly
    :ensure t
    :init (setq inferior-lisp-program "/run/current-system/sw/bin/sbcl")
    )
#+end_src
